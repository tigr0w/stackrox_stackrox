// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackrox/rox/central/compliance/standards (interfaces: Repository)

// Package mock_standards is a generated GoMock package.
package mock_standards

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	standards "github.com/stackrox/rox/central/compliance/standards"
	v1 "github.com/stackrox/rox/generated/api/v1"
	search "github.com/stackrox/rox/pkg/search"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Control mocks base method.
func (m *MockRepository) Control(arg0 string) *v1.ComplianceControl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Control", arg0)
	ret0, _ := ret[0].(*v1.ComplianceControl)
	return ret0
}

// Control indicates an expected call of Control.
func (mr *MockRepositoryMockRecorder) Control(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Control", reflect.TypeOf((*MockRepository)(nil).Control), arg0)
}

// Controls mocks base method.
func (m *MockRepository) Controls(arg0 string) ([]*v1.ComplianceControl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controls", arg0)
	ret0, _ := ret[0].([]*v1.ComplianceControl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Controls indicates an expected call of Controls.
func (mr *MockRepositoryMockRecorder) Controls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controls", reflect.TypeOf((*MockRepository)(nil).Controls), arg0)
}

// GetCISDockerStandardID mocks base method.
func (m *MockRepository) GetCISDockerStandardID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCISDockerStandardID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCISDockerStandardID indicates an expected call of GetCISDockerStandardID.
func (mr *MockRepositoryMockRecorder) GetCISDockerStandardID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCISDockerStandardID", reflect.TypeOf((*MockRepository)(nil).GetCISDockerStandardID))
}

// GetCISKubernetesStandardID mocks base method.
func (m *MockRepository) GetCISKubernetesStandardID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCISKubernetesStandardID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCISKubernetesStandardID indicates an expected call of GetCISKubernetesStandardID.
func (mr *MockRepositoryMockRecorder) GetCISKubernetesStandardID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCISKubernetesStandardID", reflect.TypeOf((*MockRepository)(nil).GetCISKubernetesStandardID))
}

// GetCategoryByControl mocks base method.
func (m *MockRepository) GetCategoryByControl(arg0 string) *standards.Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByControl", arg0)
	ret0, _ := ret[0].(*standards.Category)
	return ret0
}

// GetCategoryByControl indicates an expected call of GetCategoryByControl.
func (mr *MockRepositoryMockRecorder) GetCategoryByControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByControl", reflect.TypeOf((*MockRepository)(nil).GetCategoryByControl), arg0)
}

// Group mocks base method.
func (m *MockRepository) Group(arg0 string) *v1.ComplianceControlGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(*v1.ComplianceControlGroup)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockRepositoryMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockRepository)(nil).Group), arg0)
}

// Groups mocks base method.
func (m *MockRepository) Groups(arg0 string) ([]*v1.ComplianceControlGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Groups", arg0)
	ret0, _ := ret[0].([]*v1.ComplianceControlGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Groups indicates an expected call of Groups.
func (mr *MockRepositoryMockRecorder) Groups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Groups", reflect.TypeOf((*MockRepository)(nil).Groups), arg0)
}

// SearchControls mocks base method.
func (m *MockRepository) SearchControls(arg0 *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchControls", arg0)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchControls indicates an expected call of SearchControls.
func (mr *MockRepositoryMockRecorder) SearchControls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchControls", reflect.TypeOf((*MockRepository)(nil).SearchControls), arg0)
}

// SearchStandards mocks base method.
func (m *MockRepository) SearchStandards(arg0 *v1.Query) ([]search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchStandards", arg0)
	ret0, _ := ret[0].([]search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchStandards indicates an expected call of SearchStandards.
func (mr *MockRepositoryMockRecorder) SearchStandards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchStandards", reflect.TypeOf((*MockRepository)(nil).SearchStandards), arg0)
}

// Standard mocks base method.
func (m *MockRepository) Standard(arg0 string) (*v1.ComplianceStandard, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Standard", arg0)
	ret0, _ := ret[0].(*v1.ComplianceStandard)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Standard indicates an expected call of Standard.
func (mr *MockRepositoryMockRecorder) Standard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Standard", reflect.TypeOf((*MockRepository)(nil).Standard), arg0)
}

// StandardMetadata mocks base method.
func (m *MockRepository) StandardMetadata(arg0 string) (*v1.ComplianceStandardMetadata, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StandardMetadata", arg0)
	ret0, _ := ret[0].(*v1.ComplianceStandardMetadata)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StandardMetadata indicates an expected call of StandardMetadata.
func (mr *MockRepositoryMockRecorder) StandardMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardMetadata", reflect.TypeOf((*MockRepository)(nil).StandardMetadata), arg0)
}

// Standards mocks base method.
func (m *MockRepository) Standards() ([]*v1.ComplianceStandardMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Standards")
	ret0, _ := ret[0].([]*v1.ComplianceStandardMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Standards indicates an expected call of Standards.
func (mr *MockRepositoryMockRecorder) Standards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Standards", reflect.TypeOf((*MockRepository)(nil).Standards))
}
